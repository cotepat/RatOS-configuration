# WARNING. DO NOT EDIT THIS FILE.
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

[save_variables]
filename: ~/printer_data/config/variables.klip

# Activate the primary extruder / carriage
[gcode_macro T0]
variable_offset_applied: 0
gcode:
  {% if(printer.toolhead.extruder|lower == "extruder1") %}
    {% set svv = printer.save_variables.variables %}
    {% if (params.NOPARK is not defined and "x" in printer.toolhead.homed_axes) %}
      #SET_DUAL_CARRIAGE CARRIAGE=1
      _PARK LOCATION={printer.toolhead.position.y|float} X={printer.configfile.config["dual_carriage"].position_endstop|float - 1 - svv.xoffset}
    {% else %}
      {action_respond_info("X axis not homed or PARK not defined. Continuing...")}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE=0
    ACTIVATE_EXTRUDER EXTRUDER="extruder"

    {% if printer["gcode_macro T0"].offset_applied == 1 %}
        {action_respond_info("Removing g-code offsets...")}
        {% if ('z' in printer.toolhead.homed_axes) %}
          {% set z_move_allowed = 1 %}
          {action_respond_info("z moved allowed")}
        {% else %}
          {% set z_move_allowed = 0 %}
          {action_respond_info("z moved NOT allowed")}
        {% endif %}
        SET_GCODE_OFFSET X_ADJUST={ -(svv.xoffset) } Y_ADJUST={ -(svv.yoffset) }
        SET_GCODE_OFFSET Z_ADJUST={ -(svv.zoffset) } MOVE={ z_move_allowed }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
    {% if fan_speed != -1 %}
      SET_FAN_SPEED FAN=fan_part_cooling_extruder SPEED={fan_speed}
      SET_FAN_SPEED FAN=fan_part_cooling_extruder1 SPEED=0
    {% else %}
      # Update core Klipper's fan speed to the fan speed of the active toolhead
      # Only do this if you have a sacrificial [fan] section
      M106.1 S{printer["fan_generic fan_part_cooling_extruder"].speed * 255}
    {% endif %}
  {% endif %}

# Activate the secondary extruder / carriage
[gcode_macro T1]
gcode:
  {% if (printer.toolhead.extruder|lower == "extruder") %}
    {% if (params.NOPARK is not defined and "x" in printer.toolhead.homed_axes) %}
      #SET_DUAL_CARRIAGE CARRIAGE=1 
      _PARK LOCATION={printer.toolhead.position.y|float} X={printer.configfile.config["stepper_x"].position_endstop|float + 1}
    {% else %}
      {action_respond_info("X axis not homed or PARK not defined. Continuing...")}
    {% endif %}

    SET_DUAL_CARRIAGE CARRIAGE=1 
    ACTIVATE_EXTRUDER EXTRUDER="extruder1"

    {% if printer["gcode_macro T0"].offset_applied == 0 %}
        {action_respond_info("Applying g-code offsets...")}
        {% if ('z' in printer.toolhead.homed_axes) %}
          {% set z_move_allowed = 1 %}
          {action_respond_info("z moved allowed")}
        {% else %}
          {% set z_move_allowed = 0 %}
          {action_respond_info("z moved NOT allowed")}
        {% endif %}
        {% set svv = printer.save_variables.variables %}
        SET_GCODE_OFFSET X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset }
        SET_GCODE_OFFSET Z_ADJUST={ svv.zoffset } MOVE={ z_move_allowed }
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
    {% if fan_speed != -1 %}
      SET_FAN_SPEED FAN=fan_part_cooling_extruder1 SPEED={fan_speed}
      SET_FAN_SPEED FAN=fan_part_cooling_extruder SPEED=0
    {% else %}
      # Update core Klipper's fan speed to the fan speed of the active toolhead
      # Only do this if you have a sacrificial [fan] section
      M106.1 S{printer["fan_generic fan_part_cooling_extruder1"].speed * 255}
    {% endif %}
    #SET_INPUT_SHAPER shaper_freq_x=42.0
  {% endif %}

# Macro to perform a modified MAYBE_HOME supporting t0 and t1 macros
[gcode_macro MAYBE_HOME]
description: Only home unhomed axis
variable_is_kinematic_position_overriden: False
gcode:

  T0 NOPARK

  {% if printer["gcode_macro MAYBE_HOME"].is_kinematic_position_overriden|lower == 'true' %}
    RESPOND MSG="SET_CENTER_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_CENTER_KINEMATIC_POSITION outside of debugging purposes."
    G28
    SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=False
  {% else %}
    {% set axes = '' %}
    {% set isHomed = true %}
    {% set axesToHome = '' %}
    {% if params.X is defined %}
      {% set axes = axes ~ 'X ' %}
      {% if 'x' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'X ' %}
      {% endif %}
    {% endif %}
    {% if params.Y is defined %}
      {% set axes = axes ~ 'Y ' %}
      {% if 'y' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Y ' %}
      {% endif %}
    {% endif %}
    {% if params.Z is defined %}
      {% set axes = axes ~ 'Z ' %}
      {% if 'z' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Z ' %}
      {% endif %}
    {% endif %}
    {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
      {% set axes = '' %}
      {% if 'x' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'X ' %}
      {% endif %}
      {% if 'y' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Y ' %}
      {% endif %}
      {% if 'z' not in printer.toolhead.homed_axes %}
        {% set isHomed = false %}
        {% set axesToHome = axesToHome ~ 'Z ' %}
      {% endif %}
    {% endif %}
    {% if isHomed is false %}
      M117 Homing {axesToHome}
      RESPOND MSG="Homing {axesToHome}"
      G28 {axesToHome}
    {% else %}
      RESPOND MSG="All requested axes already homed, skipping.."
    {% endif %}
  {% endif %}

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  {% set temp0 = params.TEMP0|default(0)|int %}
  {% set temp1 = params.TEMP1|default(0)|int %}
  {% if idex_mode in [('DUPLICATION'),('MIRRORED')] %}
    {% if temp1 == 0 %}
      M117 Setting temp1 to temp0 value
      {% set temp1 = temp0 %}
      {% set no_ooze_temp1 = [temp0|int, 180]|min %}
    {% endif %}
  {% endif %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  {% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
    STOWABLE_PROBE_BEGIN_BATCH
  {% endif %}
  
  # Home if needed
  T0 NOPARK
  MAYBE_HOME

  # Initialize extruders to default state for print start macro
  SET_DUAL_CARRIAGE_MODE MODE="FULL_CONTROL"
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1

  CLEAR_PAUSE
  {% if params.CHAMBER_TEMP is defined %}
    _START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={params.CHAMBER_TEMP} BED_TEMP={printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp}
  {% endif %}
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH
  {% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
    STOWABLE_PROBE_END_BATCH
  {% endif %}
  # Start heating extruder
  M104 S{temp0} T0
  M104 S{temp1} T1
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  # Wait for extruder to heat up
  M117 Heating Extruder...
  RESPOND MSG="Heating Extruder..."
  {% if temp0 > 0 %}
    M109 S{temp0} T0 ; wait for extruder0 final temp
  {% endif %}
  {% if temp1 > 0 %}
    M109 S{temp1} T1 ; wait for extruder1 final temp
  {% endif %}
  {% if params.IDEX == "DUPLICATION" %}
    M117 Setting IDEX DUPLICATION mode...
    T1
    G0 X{(printer.toolhead.axis_maximum.x/2) + (printer.toolhead.axis_minimum.x)} F{speed}
    T0 NOPARK
    SET_DUAL_CARRIAGE_MODE MODE="DUPLICATION"
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
    _START_PRINT_AFTER_HEATING_EXTRUDER
  {% elif params.IDEX == "MIRRORED" %}
    M117 Setting IDEX MIRRORED mode...
    T0
    SET_DUAL_CARRIAGE_MODE MODE="MIRRORED"
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
    # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
    _START_PRINT_AFTER_HEATING_EXTRUDER
  {% else %} # FULL CONTROL
    {% if temp0 != 0 %}
      _START_PRINT_AFTER_HEATING_EXTRUDER
    {% endif %}
    {% if temp1 != 0 %}
      T1
      _START_PRINT_AFTER_HEATING_EXTRUDER
    {% endif %}
    T0
  {% endif %}

  M117 Printing...
  RESPOND MSG="Printing..."
  RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0

[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  M117 Adjusting for tilt...
  # Adjust bed tilt
  Z_TILT_ADJUST
  M117 Rehoming after tilt adjustment...
  # Home again as Z will have changed after tilt adjustment and bed heating.
  G28 Z

[gcode_macro _START_PRINT_PARK]
gcode:
  {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
  {% set zSpeed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  T1
  T0
  G0 Z{z} F{zSpeed}

[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
    PRIME_LINE
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
    PRIME_BLOB
  {% endif %}
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}
  {% endif %}

[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% if (printer.toolhead.extruder|lower == "extruder1") %}
      {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
  {% else %}
      {% set x_start = 5 %}
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = 5 %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
    {% set y_factor = -1 %}
  {% else %}
    {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
      {% set y_factor = 1 %}
    {% else %}
      {% set y_factor = -1 %}
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Priming nozzle with prime line..
  RESPOND MSG="Priming nozzle with prime line.."
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start} F{speed}
  # Get ready to prime
  G1 Z0.3 F{z_speed}
  # Reset extrusion distance
  G92 E0
  # Prime nozzle 
  G1 Y{y_start + (70 * y_factor)} E16 F1200
  # Wipe
  G1 Y{y_start + (90 * y_factor)} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_state
  M117 Priming nozzle with prime blob..
  RESPOND MSG="Priming nozzle with prime blob.."
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
  {% if (printer.toolhead.extruder|lower == "extruder1") %}
      {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
  {% else %}
      {% set x_start = 5 %}
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
    {% set y_start = 5 %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
    {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
    {% set y_factor = -1 %}
  {% else %}
    {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
      {% set y_factor = 1 %}
    {% else %}
      {% set y_factor = -1 %}
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
    {% set y_factor = 1 %}
  {% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
    {% set y_factor = -1 %}
  {% endif %}
  {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift to start print Z height
  G0 Z{z} F{z_speed}
  # move to blob position along the edge of the bed
  G1 X{x_start} F{speed}
  G1 Y{y_start} F{speed}
  # Lower to blob height
  G1 Z0.5 F{z_speed}
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{y_start + (25 * y_factor)} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 Y{y_start + (30 * y_factor)} Z3.8 E0.5
  G1 F200 Y{y_start + (35 * y_factor)} Z2.6 E0.5
  G1 F200 Y{y_start + (40 * y_factor)} Z1.4 E0.5
  G1 F200 Y{y_start + (45 * y_factor)} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{y_start + (50 * y_factor)} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} Y{y_start + (100 * y_factor)}
  G1 E-2
  RESTORE_GCODE_STATE NAME=prime_blob_state

[gcode_macro _PARK]
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Get X position
  {% if params.X != '' %}
    {% if params.X|float >= printer.configfile.config["stepper_x"].position_endstop|float and params.X|float <= printer.configfile.config["dual_carriage"].position_endstop|float %}
      {% set safe_x = params.X|float %}
    {% else %}
      {action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults')}
      {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
    {% endif %}
  {% else %}
    {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
  {% endif %}
  # Get Y position
  {% if params.LOCATION|lower == 'back' %}
    {% set y = printer.toolhead.axis_maximum.y - 5 %}
  {% elif params.LOCATION|lower == 'front' %}
    {% set y = printer.toolhead.axis_minimum.y + 5 %}
  {% elif params.LOCATION|lower == 'center' %}
    {% set y = printer.toolhead.axis_maximum.y / 2 %}
  {% elif  params.LOCATION|float >= printer.toolhead.axis_minimum.y and params.LOCATION|float <= printer.toolhead.axis_maximum.y %}
      {% set y = params.LOCATION|float %}
  {% endif %}
  # Absolute positioning
  G90 
  # Park
  G0 X{safe_x} Y{y} F{speed} 

  #####
# END PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####



# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:

  _END_PRINT_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS
  _END_PRINT_AFTER_HEATERS_OFF
  SAVE_GCODE_STATE NAME=end_print_state
  _END_PRINT_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  SET_DUAL_CARRIAGE_MODE MODE="FULL_CONTROL"
  SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
  # Steppers off
  M84
  # Part cooling fan off
  M107
  M117 Done :)
  RESPOND MSG="Done :)"
  RESTORE_GCODE_STATE NAME=end_print_state

[gcode_macro _END_PRINT_PARK]
gcode:
  T1
  T0
  _PARK LOCATION={printer["gcode_macro RatOS"].end_print_park_in} X={printer.configfile.config["stepper_x"].position_endstop|float + 1}

[gcode_macro _START_PRINT_BED_MESH]
gcode:
  {% set default_profile = printer["gcode_macro RatOS"].bed_mesh_profile|default('ratos') %}
  BED_MESH_CLEAR
  {% if printer["gcode_macro RatOS"].calibrate_bed_mesh|lower == 'true' %}
    BED_MESH_CALIBRATE PROFILE={default_profile}
    BED_MESH_PROFILE LOAD={default_profile}
  {% else %}
    BED_MESH_PROFILE LOAD={default_profile}
     RESPOND MSG="Loaded BED_MESH"
     RESPOND MSG={default_profile}
  {% endif %}

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swapping if not specifying P parameter.
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(5)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == 5 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off al fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=fan_part_cooling_extruder SPEED=0
        SET_FAN_SPEED FAN=fan_part_cooling_extruder1 SPEED=0
      {% else %}
        # Opt into fan speed swap control
        {% if printer.dual_carriage.mode == "FULL_CONTROL" %}
          SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
          SET_FAN_SPEED FAN=fan_part_cooling_{printer.toolhead.extruder} SPEED={speed}
        {% else %}
          SET_FAN_SPEED FAN=fan_part_cooling_extruder SPEED={speed}
          SET_FAN_SPEED FAN=fan_part_cooling_extruder1 SPEED={speed}
        {% endif %}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=fan_part_cooling_extruder SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=fan_part_cooling_extruder1 SPEED={speed}
      {% endif %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}